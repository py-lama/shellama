version: '3.8'

services:
  # SheLLama API service
  shellama:
    build:
      context: .
      dockerfile: Dockerfile
    image: shellama:latest
    container_name: shellama-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - SHELLAMA_PORT=5000
      - SHELLAMA_HOST=0.0.0.0
      - SHELLAMA_DEBUG=false
      - APILAMA_URL=http://apilama:5001
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - pylama-network
    depends_on:
      - apilama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/shellama/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # APILama Gateway service
  apilama:
    build:
      context: ../apilama
      dockerfile: Dockerfile
    image: apilama:latest
    container_name: apilama-gateway
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      - APILAMA_PORT=5001
      - APILAMA_HOST=0.0.0.0
      - APILAMA_DEBUG=false
      - SHELLAMA_URL=http://shellama:5000
      - GETLLM_URL=http://getllm:5002
      - BEXY_URL=http://bexy:5003
    volumes:
      - ../apilama/data:/app/data
      - ../apilama/logs:/app/logs
    networks:
      - pylama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # PyLLM service
  getllm:
    build:
      context: ../getllm
      dockerfile: Dockerfile
    image: getllm:latest
    container_name: getllm-service
    restart: unless-stopped
    ports:
      - "5002:5002"
    environment:
      - GETLLM_PORT=5002
      - GETLLM_HOST=0.0.0.0
      - GETLLM_DEBUG=false
    volumes:
      - ../getllm/data:/app/data
      - ../getllm/logs:/app/logs
      - ../getllm/models:/app/models
    networks:
      - pylama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/api/getllm/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # BEXY service
  bexy:
    build:
      context: ../bexy
      dockerfile: Dockerfile
    image: bexy:latest
    container_name: bexy-service
    restart: unless-stopped
    ports:
      - "5003:5003"
    environment:
      - BEXY_PORT=5003
      - BEXY_HOST=0.0.0.0
      - BEXY_DEBUG=false
    volumes:
      - ../bexy/data:/app/data
      - ../bexy/logs:/app/logs
    networks:
      - pylama-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5003/api/bexy/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # WebLama frontend service
  weblama:
    build:
      context: ../weblama
      dockerfile: Dockerfile
    image: weblama:latest
    container_name: weblama-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - WEBLAMA_PORT=3000
      - WEBLAMA_HOST=0.0.0.0
      - API_URL=http://apilama:5001
    volumes:
      - ../weblama/public:/app/public
      - ../weblama/markdown:/app/markdown
    networks:
      - pylama-network
    depends_on:
      - apilama
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # MongoDB for data storage
  mongodb:
    image: mongo:5.0
    container_name: pylama-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=pylama
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongodb-data:/data/db
    networks:
      - pylama-network
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Redis for caching
  redis:
    image: redis:6.2-alpine
    container_name: pylama-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - pylama-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 5s

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: pylama-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - pylama-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:8.2.2
    container_name: pylama-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - pylama-network
    depends_on:
      - prometheus

networks:
  pylama-network:
    driver: bridge

volumes:
  mongodb-data:
  redis-data:
  prometheus-data:
  grafana-data:
